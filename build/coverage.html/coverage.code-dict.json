{"/home/travis/build/npmtest/node-npmtest-evernote-zookeeper/test.js":"/* istanbul instrument in package npmtest_evernote_zookeeper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-evernote-zookeeper/lib.npmtest_evernote_zookeeper.js":"/* istanbul instrument in package npmtest_evernote_zookeeper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_evernote_zookeeper = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_evernote_zookeeper = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-evernote-zookeeper/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-evernote-zookeeper && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_evernote_zookeeper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_evernote_zookeeper\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_evernote_zookeeper.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_evernote_zookeeper.rollup.js'] =\n            local.assetsDict['/assets.npmtest_evernote_zookeeper.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_evernote_zookeeper.__dirname + '/lib.npmtest_evernote_zookeeper.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-evernote-zookeeper/node_modules/evernote-zookeeper/index.js":"module.exports = require('./lib/zookeeper');\n","/home/travis/build/npmtest/node-npmtest-evernote-zookeeper/node_modules/evernote-zookeeper/lib/zookeeper.js":"var en = require('evernote').Evernote;\nvar Auth = require('./auth');\nvar User = require('./user');\nvar Notebook = require('./notebook');\nvar Note = require('./note');\nvar Tag = require('./tag');\n\n\nmodule.exports = Zookeeper;\n\n\nfunction Zookeeper(config) {\n  client = new en.Client({\n    consumerKey: config.consumerKey,\n    consumerSecret: config.consumerSecret,\n    token: config.token,\n    sandbox: config.sandbox\n  });\n\n  userStore = client.getUserStore();\n  noteStore = client.getNoteStore();\n\n  this.auth = new Auth(client);\n\n  this.user = new User(client, userStore);\n  this.users = this.user; // Syntactic sugar\n\n  this.notebook = new Notebook(client, noteStore);\n  this.notebooks = this.notebook; // Syntactic sugar\n\n  this.note = new Note(client, noteStore);\n  this.notes = this.note; // Syntactic sugar\n\n  this.tag = new Tag(client, noteStore);\n  this.tags = this.tag; // Syntactic sugar\n}\n","/home/travis/build/npmtest/node-npmtest-evernote-zookeeper/node_modules/evernote-zookeeper/lib/auth.js":"module.exports = Auth;\n\n\nfunction Auth(client) {\n  this.client = client;\n}\n\n\nAuth.prototype.start = function(callbackUrl, done) {\n  this.client.getRequestToken(callbackUrl, function(err, oauthToken, oauthTokenSecret, results) {\n    done(err, {\n      oauthToken: oauthToken,\n      oauthTokenSecret: oauthTokenSecret,\n      authorizeUrl: client.getAuthorizeUrl(oauthToken)\n    });\n  });\n}\n\n\nAuth.prototype.finish = function(oauthToken, oauthTokenSecret, oauthVerifier, done) {\n  this.client.getAccessToken(\n    oauthToken,\n    oauthTokenSecret,\n    oauthVerifier,\n    function(err, token, tokenSecret, results) {\n      done(err, {\n        token: token,\n        tokenSecret: tokenSecret\n      });\n    }\n  );\n}\n","/home/travis/build/npmtest/node-npmtest-evernote-zookeeper/node_modules/evernote-zookeeper/lib/user.js":"module.exports = User;\n\n\nfunction User(client, userStore) {\n  this.client = client;\n  this.userStore = userStore;\n}\n\n\n/**\n * Return a users profile and public info.\n */\nUser.prototype.info = function(done) {\n  var self = this;\n\n  this.userStore.getUser(function(err, info) {\n    if(err) return done(err);\n\n    self.publicInfo(info.username, function(err, publicInfo) {\n      if(err) return done(err);\n      info.public = publicInfo;\n      return done(null, info);\n    });\n  });\n}\n\n\n/**\n * Gets a users public user info.\n */\nUser.prototype.publicInfo = function(username, done) {\n  this.userStore.getPublicUserInfo(username, done);\n}\n","/home/travis/build/npmtest/node-npmtest-evernote-zookeeper/node_modules/evernote-zookeeper/lib/notebook.js":"module.exports = Notebook;\n\n\nfunction Notebook(client, noteStore) {\n  this.client = client;\n  this.noteStore = noteStore;\n}\n\n\n/**\n * Return a single Evernote notebook object associated with the given\n * notebook guid.\n */\nNotebook.prototype.withGuid = function(notebookGuid, done) {\n  this.noteStore.getNotebook(notebookGuid, done);\n}\n\n\n/**\n * Return all Evernote notebook objects.\n */\nNotebook.prototype.all = function(done) {\n  this.noteStore.listNotebooks(done);\n}\n\n\n/**\n * Return the users default Evernote notebook object.\n */\nNotebook.prototype.default = function(done) {\n  this.noteStore.getDefaultNotebook(done);\n}\n","/home/travis/build/npmtest/node-npmtest-evernote-zookeeper/node_modules/evernote-zookeeper/lib/note.js":"var async = require('async');\nvar en = require('evernote').Evernote;\n\n\nmodule.exports = Note;\n\n\nfunction Note(client, noteStore) {\n  this.client = client;\n  this.noteStore = noteStore;\n}\n\n\n/**\n * Get all Evernote notes based on the given filter and result spec options. See\n * Evernote API docs for available parameters. If no result specs are specified,\n * some sane defaults will be used.\n *\n * Makes use of the findNotesMetadata Evernote API method. Because of this,\n * only note metadata is returned. If additional data is needed, you'll need\n * to make a follow-up call to the withGuid(...) method.\n */\nNote.prototype.find = function(filterOptions, resultSpecOptions, done) {\n  if(!done) {\n    done = resultSpecOptions;\n    resultSpecOptions = null;\n  }\n\n  if(!resultSpecOptions) {\n    resultSpecOptions = {\n      includeTitle: true,\n      includeContentLength: false,\n      includeCreated: true,\n      includeUpdated: true,\n      includeDeleted: true,\n      includeUpdateSequenceNum: true,\n      includeNotebookGuid: true,\n      includeTagGuids: false,\n      includeAttributes: false,\n      includeLargestResourceMime: false,\n      includeLargestResourceSize: false\n    };\n  }\n\n  var filter = new en.NoteFilter(filterOptions);\n  var resultSpec = new en.NotesMetadataResultSpec(resultSpecOptions);\n\n  var notes = [];\n  var noteCount = -1; // -1 to ensure we ignore the first test below so note count is set from result\n  var offset = 0;\n  var limit = en.EDAM_USER_NOTES_MAX;\n\n  async.until(\n    function() {\n      return noteCount >= 0 && (offset + 1) * limit > noteCount;\n    },\n    function(next) {\n      this.noteStore.findNotesMetadata(filter, offset, limit, resultSpec,\n        function(err, result) {\n          if(err) return next(err);\n\n          noteCount = result.totalNotes;\n          result.notes.forEach(function(n) {\n            notes.push(n);\n          });\n          offset++;\n          next();\n        }\n      );\n    },\n    function(err) {\n      done(null, notes);\n    }\n  );\n}\n\n\n/**\n * Return a single Evernote note object based on the given guid.\n */\nNote.prototype.withGuid = function(noteGuid, config, done) {\n  if(!done) {\n    done = config;\n    config = {\n      withContent: true,\n      withResourcesData: true,\n      withResourcesRecognition: false,\n      withResourcesAlternateData: false\n    };\n  }\n\n  this.noteStore.getNote(\n    noteGuid,\n    config.withContent,\n    config.withResourcesData,\n    config.withResourcesRecognition,\n    config.withResourcesAlternateData,\n    done\n  );\n}\n\n\n/**\n * Return all Evernote note objects within the given notebook guid.\n *\n * See find() for details.\n */\nNote.prototype.inNotebook = function(notebookGuid, resultSpecOptions, done) {\n  if(!done) {\n    done = resultSpecOptions;\n    resultSpecOptions = null;\n  }\n\n  this.find({notebookGuid: notebookGuid}, resultSpecOptions, done);\n}\n\n\n/**\n * Return all Evernote note objects.\n *\n * See find() for details.\n */\nNote.prototype.all = function(resultSpecOptions, done) {\n  if(!done) {\n    done = resultSpecOptions;\n    resultSpecOptions = null;\n  }\n\n  this.find(null, resultSpecOptions, done);\n}\n\n\n/**\n * Return all Evernote note objects tagged with given tag guids. Note that this\n* will only\n * return notes that contain *all* of the tag guids given.\n *\n * See find() for details.\n */\nNote.prototype.taggedWith = function(tagGuids, resultSpecOptions, done) {\n  if(!done) {\n    done = resultSpecOptions;\n    resultSpecOptions = null;\n  }\n\n  if(!(tagGuids instanceof Array)) {\n    tagGuids = [tagGuids];\n  }\n\n  this.find({tagGuids: tagGuids}, resultSpecOptions, done);\n}\n\n\n/**\n * Shares a note and returns its share url and share key.\n *\n * webUrl - the users public webApiUrlPrefix property (see user.publicInfo method)\n */\nNote.prototype.share = function(webUrl, noteGuid, done) {\n  this.noteStore.shareNote(noteGuid, function(err, shareKey) {\n    if(err) return done(err);\n    return done(null, {\n      shareKey: shareKey,\n      url: webUrl + 'sh/' + noteGuid + '/' + shareKey\n    });\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-evernote-zookeeper/node_modules/evernote-zookeeper/lib/tag.js":"module.exports = Tag;\n\n\nfunction Tag(client, noteStore) {\n  this.client = client;\n  this.noteStore = noteStore;\n}\n\n\n/**\n * Get all tags.\n */\nTag.prototype.all = function(done) {\n  this.noteStore.listTags(done);\n}\n\n\n/**\n * Get a single Evernote tag object based on the given guid.\n */\nTag.prototype.withGuid = function(guid, done) {\n  this.noteStore.getTag(guid, done);\n}\n\n\n/**\n * Get tags by their name.\n */\nTag.prototype.named = function(tagNames, done) {\n  var sortedTags = [];\n\n  this.all(function(err, tags) {\n    for(var k in tags) {\n      if(tagNames.indexOf(tags[k].name) > -1) {\n        sortedTags.push(tags[k]);\n      }\n    }\n\n    done(err, sortedTags);\n  });\n}\n"}